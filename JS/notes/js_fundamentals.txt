//////////////////// A R R A Y S ////////////////////


ARRAY BASICS


- not a primitive data type
- a reference type
- typeof an array is "object"
- arr[arr.length-1]; // shorthand for the last element of an array

Add to Array:

- push function - add to end of an array, returns new length of array
    array.push(item); // returns the new length (#) of array

- unshift function - add to beginning of an array, returns new length of array
    array.unshift(item); //returns the new length (#) of array

Remove from Array:

- pop function - removes item at the end of array one-by-one, returns the item removed
    array.pop(); //returns the item removed

- shift function - removes item from the beginning of the array, returns the item removed
    array.shift() //returns the item removed

- delete function on array - replaces item at index with undefined
    delete array[1]; //replaces item at array[1] with undefined

Removing/Adding or both with splice

- array.splice(index start splice inclusive, # items to remove, items to add in place separated by commas)
    var arr = ["a","b","c","d"];
    arr.splice(1,2,"x","y","z"); // ["b", "c"]
    arr; // ["a", "x", "y", "z", "d"]


ARRAY METHODS


- array.length - a property, not function, that returns how many elements are in the array

- array.slice() - makes a copy of an array, can copy a subarray
    array.slice(); //copies the entire array
    array.slice(start index inclusive, end index exclusive);

- array1.concat(array2); - joins two arrays together, can join multiple arrays separated by comma to return a single array, can also add comma separated list of items to an array to create a new array
    joinedArray = array1.concat(array2);
    joinedArray = array1.concat(array2, array3, array4);
    joinedArray = array1.concat("one", 2, 3.4);

- array.join(separator) - joins elements of an array into a string separated by the argument/delimiter

- array.indexOf(item) - finds the first index of the element passed in; if not found, returns -1; good for checking if an item is in an array

- array.lastIndexOf(item) - starts searching for an item from the end, returns the index, returns -1 if item not found in the array

Reference vs Value

Passing by Value:

var var1 = "A";
var var2 = var1;
var2 // "A";
var2 = "B";
var1; // "A"
var2; // "B"
- these primitive types have a specific address in memory
- when assign var1 = var2, JS creates a copy of the string "A" and assign that value to var2
- var1 and var2 pointing to different locations in memory even if the string looks identical

But for Reference types...

Passing by Reference:

var array1 = ["A", "B"];
var array2 = array1;
array2.push("C");
array1; // ["A", "B", "C"]
array2; // ["A", "B", "C"]
- when set another variable equal to a variable pointing to an array, JS does not create a new array, it creates a reference/pointer to the array
- both variable names refer/points to the same array


ARRAY ITERATIONS


For Loop:

for (initializer; condition; counter) {}

- initializer - declare variables to be used in the loop, usually variable i as a counter variable for number of times to loop
- condition - expression to evaluate true or false, loop if condition is true
- counter - how change (increase/decrease) the variable(s) initialized
- {} if condition is true, do stuff in curly brace
Example:
for(var i=0; i<5; i++){
    console.log(i);
}

While Loop:

- while loop only takes a condition
- handle initialization before the loop
- incrementing/decrementing inside the loop
- beware of infinite loop

var i = 0;
while (condition){
    //do this//;
    i++;
}

Do...While Loop:

- specify condition at the end
- difference from while loop: code inside do...while loop guaranteed to execute at least once, even if while condition is false
- while condition runs after the do code has run through once

var i = 0;
do {
    //this thing//;
    i++;
} while(condition);

Exiting out of Loop:

- break : to exit a loop before it has finished
- continue : skip the current iteration and continue the loop at the next step of the iteration


//////////////////// O B J E C T S ////////////////////


OBJECT BASICS


- key-value mapping

var object {
    key1: "value1",
    key2: "value2",
    key3: "value3",
    key4: true/false
};

- key-value pairs are unordered in the object

Accessing Object Values

- access value using dot notation:
objectName.keyName;

- access value using bracket notation:
objectName["keyName"]; //note that the key name is in quotations

objectName[keyName]; will return an error because there is no variable by that name (keyName).

- Best practice: use dot notation if able to use it
- Might not be able to use it if...
    - the key is a number
    - using a variable that points to the key to indicate the key

    Example:

    var obj = {};
    var person = "Tom";

    obj[person] = "This is a person";
    obj[1+1+1] = "Three";

    obj;

    /*
    obj now should look like this: 
    {
        Tom: "This is a person",
        3: "Three"
    }
    */

    obj.3;// Syntax Error! Can't use the dot notation
    obj[3]; // "Three" - we NEED to use the bracket notation
    obj[person]; // "This is a person" // variable person points to "Tom"
    obj["Tom"]; // "This is a person" //Tom must be in quotes
    obj.person; // undefined
    obj.Tom; // "This is a person"

- Use bracket notation when need to evaluate some expression or pass in a variable to get the name of the key
- Use dot notation when know the name of key -- if name of key is not a variable or expression

- type of a key in JS is always a string, JS automatically converts the key to a string (i.e. numbers like 7 --> "7")

Adding to Objects:

- can use . or [], though . is preferred if possible
obj.newKey1 = "new value"; //preferred
obj["newKey2"] = "another new value";

Removing from Objects:

- delete keyword to remove a key from an object

delete obj.newKey1; //returns true, even if trying to delete a key that doesn't exist... haha... >__<


OBJECT ITERATION


for...in loop:

var obj = {
    // key-value pairs //
}

for(var singleKey in obj){
    // do something with obj[singleKey] //;
}

- singleKey - variable assigned to each key in the object
- must use bracket notation to access the key's value (because variable)

if...in statement:

- checking for a key in an object

var obj = {
    // key-value pairs //
}

if ("keyName" in obj){
    // do this //;
}


//////////////////// F U N C T I O N S ////////////////////


- function: a repeatable process of procedure
- input: (variable(s))
- output: returns a value

Function Declaration / Definition

function functionName(parameter(s)){
    // do the things //;
}

- calling/executing a function = invoking a function
functionName();

Returning Values from Functions

- if no specified value to be returned, function will return undefined
- return keyword can only be executed once in a function; once executed, function complete

Conditional Logic with Return Statements




